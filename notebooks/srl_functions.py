# -*- coding: utf-8 -*-
"""srl_functions.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pmnN2qr4YbI8kNHstJ9bUHLxZxuWlStv
"""

import torch
device = torch.device('cuda:0')
import pickle
import re
import random
import nltk
import scipy.stats as stats

from transformers import BertTokenizer
from allennlp.predictors.predictor import Predictor
import allennlp_models.tagging

# predictor = Predictor.from_path("https://storage.googleapis.com/allennlp-public-models/structured-prediction-srl-bert.2020.12.15.tar.gz")
predictor = Predictor.from_path("https://storage.googleapis.com/allennlp-public-models/structured-prediction-srl-bert.2020.12.15.tar.gz", cuda_device=torch.cuda.current_device())

# remove 'Project''Gutenberg' in the name list
def removeProjectGutenberg_LowerCase(nameList):
    newList = []
    for name in nameList:
        if name.lower() not in ['project', 'gutenberg']:
            newList.append(name.lower())
    return newList

# Initialize the tokenizer
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")

def hasComponent(string, wordList):
    for token in string.split():
        if token in wordList:
            return True
            break
    return False

def getArg0Arg1perVerb(sentence, femaleList, maleList, surnameList, result, verbList):
    matches = re.findall(r'\[(.*?): (.*?)\]', sentence)
    if matches:
        for match in matches:
            role = match[0]
            if role in ['ARG0', 'ARG1']:
                char = match[1].lower() # change the char to lower case
                if hasComponent(char, verbList):
                    pass
                if char in femaleList:
                    result['female'][role] = result['female'].get(role, 0) + 1
                elif char in maleList:
                    result['male'][role] = result['male'].get(role, 0) + 1
                elif hasComponent(char, femaleList) and (not hasComponent(char, maleList)):
                    # to prevent situations like 'her age' be counted as female
                    if char.split()[-1] in femaleList or char.split()[-1] in surnameList: # or char.split()[-1] in mixSurname List (do not add surnames back in femaleList)
                        result['female'][role] = result['female'].get(role, 0) + 1
                elif (not hasComponent(char, femaleList)) and hasComponent(char, maleList):
                    if char.split()[-1] in maleList or char.split()[-1] in surnameList:
                        result['male'][role] = result['male'].get(role, 0) + 1
    return result

# if text consists of a list of sentences
def getArg0Arg1perText(text, femaleList, maleList, surnameList, result, checkResult):
    for sentence in text:
        truncated_sentence = sentence
        tokens = tokenizer.tokenize(truncated_sentence)
        while len(tokenizer.tokenize(truncated_sentence)) > 512:
            tokens = tokenizer.tokenize(truncated_sentence)
            tokens = tokens[:510]
            truncated_sentence = tokenizer.convert_tokens_to_string(tokens)
        output = predictor.predict(sentence=truncated_sentence)
        verbList = []
        for item in output['verbs']:
            verbList.append(item['verb'])
        for verbIdx in range(len(verbList)):
            import random
            check = random.random() <= 0.0001
            # if check: print(result)
            description = output['verbs'][verbIdx]['description']
            result = getArg0Arg1perVerb(description, femaleList, maleList, surnameList, result, verbList)
            if check:
                checkResult['description'].append(description)
                checkResult['result'].append(result)
                # print(description)
                # print(result)
    return result